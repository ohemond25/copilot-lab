---
title: "Copilot Demo"
author: "Olivia Hemond"
format: html
editor: visual
---
# Setup

Copilot gives prompts to text in quarto documents.

Copilot is a tool that helps you write better text and code.

## Load in the seeds data

```{r}
library(tidyverse)
seeds <- read_csv("https://raw.githubusercontent.com/oliviahemond/copilot_demo/main/seeds.csv") # not right

# load in the seeds .txt data using read_tsv() from the data folder
seeds_txt <- read_tsv("https://raw.githubusercontent.com/oliviahemond/copilot_demo/main/data/seeds.txt") # also not right

# load in the seeds_dataset .txt data using read_tsv() from the data folder, and assign column names. Change -999 to NA
seeds_txt <- read_tsv(here::here('data', 'seeds_dataset.txt'), col_names = c("area", "perimeter", "compactness", "length", "width", "asymmetry", "groove"), na = "-999") # created correct version

# final version
seeds <- read_tsv("data/seeds_dataset.txt", col_names = c("area", "perimeter", "compactness", "length", "width", "asymmetry", "groove", "species"), na = "-999") %>%
  mutate(species = case_when(species == 1 ~ "Kama", species == 2 ~ "Rosa", species == 3 ~ "Canadian"))
```

## Exploratory visuals

Let's make some histograms of the seeds data to see what it looks like.

```{r}
# Make histograms of the numeric columns in the seeds data
seeds %>%
  select(-species) %>%
  pivot_longer(cols = everything()) %>%
  ggplot(aes(x = value)) +
  geom_histogram() +
  facet_wrap(~name, scales = "free") +
  theme_minimal()

# Make histograms of the numeric columns in the seeds data, facet wrapped by species
seeds %>%
  select(-species) %>%
  pivot_longer(cols = everything()) %>%
  ggplot(aes(x = value)) +
  geom_histogram() +
  facet_wrap(~name, scales = "free") +
  theme_minimal() +
  facet_wrap(~species)
# the above code doesn't work

```

## Pseudocode helps copilot think about suggestions

Pseudocode plan:

We need to remove NAs
Scale the numeric seeds data
Use NbClust to get optimal clusters
Make a knee plot 
Use kmeans to cluster the data
Plot the data with the clusters

```{r}
# Remove NAs from the seeds data and save as a new object
seeds_clean <- seeds %>%
  drop_na()

# Scale the numeric columns in the seeds with no NAs and save as a new object
seeds_scaled <- seeds_clean %>%
  select(-species) %>%
  scale()

# Use NbClust to get the optimal number of clusters for the seeds data
library(NbClust)
nb <- NbClust(seeds_scaled, distance = "euclidean", min.nc = 2, max.nc = 10, method = "kmeans")

# Make a knee plot of the seeds data
library(factoextra)
fviz_nbclust(nb)

# Make a knee plot using the scaled data, kmeans, and a max of 10 clusters
fviz_nbclust(seeds_scaled, kmeans, method = "wss", k.max = 10)

# Use kmeans to cluster the seeds data with 3 clusters
seeds_kmeans <- kmeans(seeds_scaled, centers = 3)

# Plot the seeds data with the clusters
seeds_clean %>%
  mutate(cluster = seeds_kmeans$cluster) %>% # need to take from the seeds_kmeans cluster ID
  ggplot(aes(x = area, y = perimeter, color = factor(cluster))) +
  geom_point() +
  theme_minimal()

# q: How does kmeans clustering work?
# a: Kmeans clustering works by finding the center of the clusters and then assigning each data point to the nearest cluster center. It then recalculates the cluster centers and reassigns the data points until the cluster centers no longer change. 


```

